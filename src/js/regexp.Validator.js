export default class Validator {
  constructor(username) {
    this.username = username;
  }

  // Реализуйте класс Validator с методом validateUsername, который проверяет имя
  // пользователя с помощью регулярных выражений на соответствие следующим правилам:

  // Допустимы только латинские буквы -> \w
  // символы тире -, подчёркивания _ -> -_
  // и цифры (0-9) -> \d

  // Имя не должно содержать подряд более трёх цифр \d{3\}
  // а также начинаться и заканчиваться цифрами, символами подчёркивания или тире. \d-_
  validateUsername() {
    const ruleOne = /([^\w-_])|(\d{3\})/;
    const ruleTwo = /(^[\d-_]+)|([\d-_]+$)/;
    return !ruleOne.test(this.username) && !ruleTwo.test(this.username);
  }
}

// \s — пробел
// ^ — начало строки
// $ — конец строки
// | — “или”

// \d — соответствует любой цифре; эквивалент [0-9]
// \D — соответствует любому не числовому символу; эквивалент [^0-9]
// \s — соответствует любому символу whitespace; эквивалент [ \t\n\r\f\v]
// \S — соответствует любому не-whitespace символу; эквивалент [^ \t\n\r\f\v]
// \w — соответствует любой букве или цифре; эквивалент [a-zA-Z0-9_]
// \W — наоборот; эквивалент [^a-zA-Z0-9_]
// . — (просто точка) любой символ, кроме перевода “каретки”

// \d{5} - ровно пять цифр
// \d{3,5} - от 3 до 5 цифр
// \d{3,} - 3 и более цифр
// \d+ || \d{1,}
// ? || {0,1} - ноль или один: colou?r -> color || colour
// * || {0,} - ноль или более: 100 10 1 -> 100 10 1
// \d0* - цифра и все 0 за ней